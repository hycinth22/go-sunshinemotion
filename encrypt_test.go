package ssmt

import (
	"testing"
)

var edStringTestCase = map[string]string{
	`{"results":"2.111","beginTime":"2019-03-19 14:38:02","endTime":"2019-03-19 14:38:07","isValid":1,"schoolId":60,"bz":"C4F4DD3BDD73BAEEE4CF3655C868FCBE640C5135CD76567F79420B0AE2D490132542B908D88399BB7BA2DA8E13C88099892AC29ECA1C0992CB2FB893B1C8FA996401394E121F845BA72C70416184371163426924E4EF6CBFA81F231EC8EFFA5DD56404EC64776BFEAEED95EB48C808FC91D54607A2E3A2C58E2AA8CC1EE54B91","xtCode":"E52032D81713BAC79DE21C2BF0B68C2F"}`: "D338F325AB176719FFB7DC49C58C988151484A79051E28AF93A20EDEB4B6A368D2CFA18933972621D4D32125C6D9EE6CBECDD7DAB9410A6A2ABC5559CE433857D2CFA18933972621D4D32125C6D9EE6C5E7A4B63E078A6964A0A6E3821E123A08FE3B87B86999C5D0C6FCCFAE4D159E98B31340A8B595EB917C50C7F9D0D4E0CEE8C4FF8833572011DFA1FBB947F351B9F07DF14CF9E9FE36DC698CF3D9D54FC49B8B06DC3124202BD953A4C5A72DB7A0A8B0C6A496C6808710ADD2E1749380EB9050163CC6A9219A8CD95E6E1B132052C2C71A32B65FD4CBC6A252342DF045B8B9FA1B7AF1AFBC33BD0AD5972294C973EC466F85A53CDEC99862206ABC272E6508BEB826CBDAA66655B8646B775AAB8BA67A62E5EE9B42D8DBD31C57E07D02B5A542FFF46C5A676B952DBD3E9B2441CB74C8D1EE4D09A25AEE7D67AA55B0C4812750D5FC845331F4A25EAF96BCCE35B99F14A48033A6F87ACD615983D9C3ADE0D3814AE4D71B2830BA22722E8064450CF91BEFFA684DA4ED9072B3F86BCC3FDA8820694E654D74720B2D20636E440671800725FD19B66D6423E2F514619D38E91D28ABE1D96EBD346631E2AA4E4DD32",
	`[ccxyct:1552977487009, Android,22,5.1.1SM-G955N-user 5.1.1 NRD90M 500190227 release-keys, 000000000000000, 354730020248286]`: "2462FC874A3789DECD1A52D276CBEC9CEA5DDACACDF4C12894CFF9246A48AEE984A4C7F4237AF94E9C2BFB9AEBB5AC4F11799FAA04CEA8CBCA000AE37A0ACCD5F4D907A0D87CA7ED59C4AB49CF7658F330989B4B0C87C382005D001D237CEAAF17C5D00F9B75848F8B3C9C8F8226ADED3455EB6634291E44D32120190ACBD67F",
	"":   "A7105289E8680C82FFC873FAEF71615D",
	"[]": "83820238D043199C7857A7C240036245",
	"[1544338246, xposed, root, Android,19,4.4.2, 354730010542250, 460075422517361]": "B2CCBC26F84DD55A4D2491D02817367B6BF73083A8FC8B98ACE8B62FFF546906110DA952681C88207090A8BDEBF4BA1BE887AE9CB8A6CDFF621FC55CA7341FC96F5533BC44F0BE15843A580439257DE3",
	"[1544345190, Android,24,7.0, 865964032623895, 460110101098930]":                 "6A07E6C9B265A080058FB29043689726A79BC63F839096DEC0B4993FE148D0F05E2EEFA3196D2F2CD2A6ADBC22AD175DC9D16C5344FBA48E6373061690ADB723",
}

func TestEncodeString(t *testing.T) {
	for plain, ciphered := range edStringTestCase {
		t.Run("TestEncodeString SubTest", func(st *testing.T) {
			bz := EncodeString(plain)
			st.Log(plain, bz, len(bz))
			if bz != ciphered {
				st.FailNow()
			}
		})
	}
}

func TestDecodeString(t *testing.T) {
	for plain, ciphered := range edStringTestCase {
		t.Run("TestDecodeString SubTest", func(st *testing.T) {
			defer func() {
				if x := recover(); x != nil {
					st.Logf("panic when decode `%s`\n maybe test case is invalid or decode code is incorrect", ciphered)
					st.FailNow()
					return
				}
			}()
			bz, err := DecodeString(ciphered)
			st.Log(bz, len(bz), err)
			if bz != plain {
				st.FailNow()
			}
		})
	}
}

func TestCalcXTcode(t *testing.T) {
	tests := []struct {
		name      string
		userId    int64
		beginTime string
		distance  string
		xtcode    string
	}{
		{"normal case", 11732, "2019-03-19 14:38:02", "2.111", "3901495440D9F0FE2BCEC94325FF556E"},
		{"normal case", 11732, "2019-03-19 14:38:02", "0.000", "03E247BE8AAC04B5C87CB436D27E521C"},
		{"normal case", 11733, "2019-03-19 14:38:02", "0.000_", "F3608192BF6D88BBCF1ABA4CB484A08B"},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			result := CalcXTcode(test.userId, test.beginTime, test.distance)
			if result != test.xtcode {
				t.Logf("test %+v failed. actual value: %v", test, result)
				t.FailNow()
			}
		})
	}
}
